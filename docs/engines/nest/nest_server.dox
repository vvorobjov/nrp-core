/*! \page nest_server NEST Server Engine

This engine allows to use out of the box the <a href="https://pypi.org/project/nest-server/">nest-server</a> application that comes with NEST 3 together with NRP-core. In this case the Engine server is nest-server itself without modifications. Thus the engine implementation is reduced to the engine client, which translates requests for advancing the simulation and sending or getting datapack data to nest-server using its REST API.

From a user point of view, this engine is very similar to \ref nest_json. At initialization time, it loads a NEST simulation model described in a python script. At run time, it takes care of advancing the simulation when requested and of handling datapack data transfer.

The main difference is that in this case datapacks can't be registered from within the aforementioned Python script, as it is done in the case of NestJsonEngine. Instead, users rely on the mechanism provided by nest-server to access populations and connections status.

In order to access, from TransceiverFunctions, NEST populations defined in the brain python script, they have to be mapped to a datapack name in a dictionary referred to as <b>populations</b>.
Afterwards the status of those population will be available as JsonDataPacks; they are updated with the results of calling the NEST <i>GetStatus</i> function.
The limitations on the objects that can be used as values in this dictionary will be those imposed by nest-server.
Similarly, a dictionary named <b>connections</b> mapping datapack names to "source" and "target" population names (contained in <b>populations</b>) can be defined too.
Such datapacks will be updated using the NEST <i>GetConnections</i> function.

\section nest_server_datapacks DataPacks

This engine supports a unique datapack type: JsonDataPack. It contains the status of a set of NEST objects as a list of dictionaries.

The way to register a JsonDataPack datapack is adding it to the <b>populations</b> dictionary in the initialization Python script. Afterwards, the status of the value to this key in the dictionary can be accessed or set in TransceiverFunctions.

The experiment located in `examples/husky_braitenberg_nest_server` shows how the NEST Server Engine can be configured in NRP-core. It can be observed that it is almost indistinguishable from its \ref nest_json version, which can be found in `examples/husky_braitenberg`. The only difference is that datapacks are registered through the populations dictionary:

\dontinclude husky_braitenberg_nest_server/braitenberg.py
\skip populations
\until }

  <table>
  <caption id="python_datapack_attributes_table">JsonDataPack Attributes</caption>
  <tr><th>Attribute       <th>Description                  <th>Python Type <th>C type
  <tr><td>data    <td>data contained in the datapack as a NlohmannJson object    <td>NlohmannJson <td>nlohmann::json
  </table>

\section nest_server_configuration Engine Configuration Parameters

This Engine type parameters are defined in the NestServerEngine schema (listed \ref nest_server_schema "here"), which in turn is based on \ref engine_base_schema "EngineBase" thus inherits all parameters from them.

To use the NEST server engine in an experiment, set `EngineType` to <b>"nest_server"</b>.

- Parameters inherited from \ref engine_base_schema "EngineBase" schema:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>EngineName<td>Name of the engine<td>string<td><td>X<td>
<tr><td>EngineType<td>Engine type. Used by EngineLauncherManager to select the correct engine launcher<td>string<td><td>X<td>
<tr><td>EngineProcCmd<td>Engine Process Launch command<td>string<td><td><td>
<tr><td>EngineProcStartParams<td>Engine Process Start Parameters<td>string<td>[]<td><td>X
<tr><td>EngineEnvParams<td>Engine Process Environment Parameters<td>string<td>[]<td><td>X
<tr><td>EngineLaunchCommand<td>\ref configuration_schema "LaunchCommand" with parameters that will be used to launch the engine process<td>object<td>{"LaunchType":"BasicFork"}<td><td>
<tr><td>EngineTimestep<td>Engine Timestep in seconds<td>number<td>0.01<td><td>
<tr><td>EngineCommandTimeout<td>Engine Timeout (in seconds). It tells how long to wait for the completion of the engine runStep. 0 or negative values are interpreted as no timeout<td>number<td>0.0<td><td>
</table>

- Parameters specific to this engine type:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>NestInitFileName<td>Path to the Python script that sets up the neural network for the simulation<td>string<td><td>X<td>
<tr><td>NestRNGSeed     <td>Nest RNG seed       <td>integer     <td>0<td><td>
<tr><td>NestServerHost  <td>Nest Server Host    <td>string      <td>localhost<td><td>
<tr><td>NestServerPort  <td>Nest Server Port    <td>integer     <td>first unbound port starting from 5000<td><td>
<tr><td>MPIProcs  <td>Number of MPI processes used in the NEST simulation    <td>integer   <td>1 <td><td>
</table>

\section nest_server_schema Schema

As explained above, the schema used by the NEST engine inherits from \ref engine_base_schema "EngineBase" schema. A complete schema for the configuration of this engine is given below:

\include engines/engines_nest.json

*/
