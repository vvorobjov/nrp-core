#include <boost/python.hpp>

#include "nrp_event_loop/nodes/mqtt/input_node.h"
#include "nrp_event_loop/nodes/mqtt/output_node.h"

#include "nlohmann/json.hpp"

// '#include' statements for all supported protobuf msg types headers. Configured from cmake.
@PROTO_MSG_TYPES_INCLUDE@

namespace bpy = boost::python;

/*!
 * \brief This class acts as a factory of InputMQTTEdge and OutputMQTTEdge for all the supported payload types.
 *
 * The class is used to define the python decorators creating MQTT edges. It is configured from cmake with all the supported
 * protobuf msg types. These are all types for which Python bindings are created.
 *
 * 'msgType' in the constructor is expected to be Python class from 'nrp_core.data.nrp_protobuf', 'nrp_core.data.nrp_json.NlohmannJson'
 * or 'str' and it is used to infer the right type to use for instantiating MQTT nodes from this class.
 */
class MqttEdgeFactory {

public:
    
    /*!
     * \brief Constructor
     */
    MqttEdgeFactory(const std::string& keyword, const std::string& address, const bpy::object& msgType,
                   InputNodePolicies::MsgPublishPolicy msgPublishPolicy,
                   InputNodePolicies::MsgCachePolicy msgCachePolicy,
                   bool isInput = true,
                   bool publishFromCache = false,
                   unsigned int computePeriod = 1) :
        _keyword(keyword),
        _address(address),
        _msgPublishPolicy(msgPublishPolicy),
        _msgCachePolicy(msgCachePolicy),
        _isInput(isInput),
        _publishFromCache(publishFromCache),
        _computePeriod(computePeriod)
    {
        _moduleName = boost::python::extract<std::string>(msgType.attr("__module__"))();
        boost::python::tuple bases(msgType.attr("__bases__"));
        for (long i = 0; i < boost::python::len(bases); i++)
            _isDatapack = boost::python::extract<std::string>(bases[i].attr("__name__"))() == "DataPackInterface" || _isDatapack;

        if(_isDatapack) {
            auto obj = msgType("dpname", "enginename");
            _className = boost::python::extract<std::string>(obj.attr("data").attr("__class__").attr("__name__"))();
        }
        else
            _className = boost::python::extract<std::string>(msgType.attr("__name__"))();
    }

    /*!
     * \brief Calls InputMQTTEdge pySetup parameterized for MQTT msg type MSG_TYPE
     */
    template<class MSG_TYPE>
    boost::python::object pySetupInput(const boost::python::object& obj)
    {
        if(_isDatapack) {
            auto mqttEdge = DPInputMQTTEdge<MSG_TYPE>(_keyword, _address, _msgPublishPolicy, _msgCachePolicy);
            return mqttEdge.pySetup(obj);
        }
        else {
            auto mqttEdge = InputMQTTEdge<MSG_TYPE>(_keyword, _address, _msgPublishPolicy, _msgCachePolicy);
            return mqttEdge.pySetup(obj);
        }
    }

    /*!
     * \brief Calls OutputMQTTEdge pySetup parameterized for MQTT msg type MSG_TYPE
     */
    template<class MSG_TYPE>
    boost::python::object pySetupOutput(const boost::python::object& obj)
    {
        if(_isDatapack) {
            auto mqttEdge = DPOutputMQTTEdge < MSG_TYPE>(_keyword, _address, _publishFromCache, _computePeriod);
            return mqttEdge.pySetup(obj);
        }
        else {
            auto mqttEdge = OutputMQTTEdge<MSG_TYPE>(_keyword, _address, _publishFromCache, _computePeriod);
            return mqttEdge.pySetup(obj);
        }
    }

    /*!
     * \brief __call__ function in the decorator
     *
     * Calls InputMQTTEdge or OutputMQTTEdge pySetup with 'obj' and the right MQTT msg type as parameter as inferred from
     * the 'msgType' object passed to the constructor
     */
    boost::python::object pySetupSelector(const boost::python::object& obj)
    {
        // 'str' object case
        if (_className == "str") {
            if(_isInput)
                return pySetupInput<std::string>(obj);
            else
                return pySetupOutput<std::string>(obj);
        }

        // json object case
        if (_moduleName.rfind("nrp_core.data.nrp_json", 0) == 0 && _className == "NlohmannJson") {
            if(_isInput)
                return pySetupInput<nlohmann::json>(obj);
            else
                return pySetupOutput<nlohmann::json>(obj);
        }

        // protobuf object case
        if (_moduleName.rfind("nrp_core.data.nrp_protobuf", 0) != 0) {
            std::string dec_type = _isInput ? "MQTTSubscriber decorator \"" : "MQTTPublisher decorator \"";
            throw NRPException::logCreate("Error occurred while processing "+ dec_type + _address +
            "\". MQTT node type must be either \"str\", \"nrp_core.data.nrp_json.NlohmannJson\" or an \"nrp_core.data.nrp_protobuf\" class.");
        }

        // 'if' statements selecting the right protobuf msg type. Configured from cmake.
        @PROTO_MSG_TYPES_CHECK@
        {
            std::string dec_type = _isInput ? "MQTTSubscriber decorator \"" : "MQTTPublisher decorator \"";
            std::string error_msg = "Error occurred while processing "+ dec_type + _address +"\". Protobuf message type: \"" +
                    _moduleName + "." + _className + "\" is not supported.";
            throw NRPException::logCreate(error_msg);
        }
    }

private:

    std::string _keyword;
    std::string _address;
    std::string _className;
    std::string _moduleName;
    bool _isDatapack = false;
    InputNodePolicies::MsgPublishPolicy _msgPublishPolicy;
    InputNodePolicies::MsgCachePolicy _msgCachePolicy;
    bool _isInput;
    bool _publishFromCache;
    unsigned int _computePeriod;
};

class MqttEdgeFactoryOutput
        : public MqttEdgeFactory
{
public:

    MqttEdgeFactoryOutput(const std::string& keyword, const std::string& address, const bpy::object& msgType,
                          bool publishFromCache = false,
                          unsigned int computePeriod = 1) :
            MqttEdgeFactory(keyword, address, msgType, InputNodePolicies::LAST, InputNodePolicies::KEEP_CACHE, false,
                            publishFromCache, computePeriod)
    {}
};
