set(PROJECT_NAME "NRP${engine_name}GrpcEngine")
set(HEADER_DIRECTORY "${engine_name_lowercase}_grpc_engine")

set(NAMESPACE_NAME "$${PROJECT_NAME}")

set(LIBRARY_NAME "$${PROJECT_NAME}")
set(PYTHON_MODULE_NAME "${engine_name}_grpc")
set(EXECUTABLE_NAME "NRP${engine_name}GrpcServerExecutable")
set(EXECUTABLE_ASYNC_NAME "${engine_name}Async")
set(TEST_NAME "$${PROJECT_NAME}Tests")

set(LIB_EXPORT_NAME "$${LIBRARY_NAME}Targets")
set(LIB_CONFIG_NAME "$${LIBRARY_NAME}Config")
set(LIB_VERSION_NAME "$${LIB_CONFIG_NAME}Version")
set(ENV{NRP_ENGINE_LAUNCHERS} "$${LIBRARY_NAME}.so;$$ENV{NRP_ENGINE_LAUNCHERS}")

cmake_minimum_required(VERSION 3.16)
project("$${PROJECT_NAME}" VERSION 1.0.0)

include(GNUInstallDirs)
include(ExternalProject)

# List library build files
set(LIB_SRC_FILES
    ${engine_name_lowercase}_grpc_engine/engine_server/${engine_name_lowercase}_grpc_server.cpp
    ${engine_name_lowercase}_grpc_engine/engine_server/${engine_name_lowercase}_grpc_datapack_controller.cpp
    ${engine_name_lowercase}_grpc_engine/engine_client/${engine_name_lowercase}_grpc_client.cpp
)

# List of Python module build files
set(PYTHON_MODULE_SRC_FILES
)

# List executable build files
set(EXEC_SRC_FILES
    ${engine_name_lowercase}_grpc_engine/server_executable/main_sync.cpp
)

set(EXEC_ASYNC_SRC_FILES
        ${engine_name_lowercase}_grpc_engine/server_executable/main_async.cpp
        )

# List testing build files
set(TEST_SRC_FILES
)


##########################################
## Dependencies


##########################################
## Header configuration

# General Header defines
set(NRP_${engine_name_uppercase}_EXECUTABLE $${EXECUTABLE_NAME})
configure_file("${engine_name_lowercase}_grpc_engine/config/cmake_constants.h.in" "$${CMAKE_CURRENT_BINARY_DIR}/include/$${HEADER_DIRECTORY}/config/cmake_constants.h" @ONLY)

# Python module dependencies
#configure_file("nrp_example_engine/python/__init__.py.in" "$${CMAKE_CURRENT_BINARY_DIR}/src/__init__.py" @ONLY)


##########################################
## NRPExampleEngineLibrary
add_library("$${LIBRARY_NAME}" SHARED $${LIB_SRC_FILES})
add_library($${NAMESPACE_NAME}::$${LIBRARY_NAME} ALIAS $${LIBRARY_NAME})
target_compile_options($${LIBRARY_NAME} PUBLIC $$<$$<OR:$$<CXX_COMPILER_ID:Clang>,$$<CXX_COMPILER_ID:GNU>>:$${NRP_COMMON_COMPILATION_FLAGS}>)
target_compile_options($${LIBRARY_NAME} PUBLIC $$<$$<CXX_COMPILER_ID:GNU>:-fconcepts>)

set_target_properties($${LIBRARY_NAME} PROPERTIES PREFIX "")

target_link_libraries($${LIBRARY_NAME}
    PUBLIC
        $${NRP_GEN_LIB_TARGET}
        NRPGRPCEngineProtocol::NRPGRPCEngineProtocol
        NRPProtobuf::ProtoEngineTest

    PRIVATE
)

target_include_directories($${LIBRARY_NAME} BEFORE
    PUBLIC 
        "$$<INSTALL_INTERFACE:$${CMAKE_INSTALL_INCLUDEDIR}>"
        "$$<BUILD_INTERFACE:$${CMAKE_CURRENT_SOURCE_DIR}>"
        "$$<BUILD_INTERFACE:$${CMAKE_CURRENT_BINARY_DIR}/include>"

    PRIVATE
)


##########################################
## example_engine
if(NOT $${PYTHON_MODULE_SRC_FILES} STREQUAL "")
    add_library($${PYTHON_MODULE_NAME} SHARED $${PYTHON_MODULE_SRC_FILES})
    add_library($${NAMESPACE_NAME}::$${PYTHON_MODULE_NAME} ALIAS $${PYTHON_MODULE_NAME})
    target_compile_options($${PYTHON_MODULE_NAME} PRIVATE $$<$$<OR:$$<CXX_COMPILER_ID:Clang>,$$<CXX_COMPILER_ID:GNU>>:$${NRP_COMMON_COMPILATION_FLAGS}>)
    set_target_properties($${PYTHON_MODULE_NAME} PROPERTIES PREFIX "")

    target_include_directories($${PYTHON_MODULE_NAME}
        PUBLIC

    )

    target_link_libraries($${PYTHON_MODULE_NAME}
        PUBLIC
            $${NAMESPACE_NAME}::$${LIBRARY_NAME}
    )
endif()


##########################################
## NRPExampleServerExecutable
if(NOT "$${EXEC_SRC_FILES}" STREQUAL "")
    add_executable($${EXECUTABLE_NAME} $${EXEC_SRC_FILES})
    target_link_libraries($${EXECUTABLE_NAME} $${LIBRARY_NAME})
endif()

if(ENABLE_MQTT)
    add_executable($${EXECUTABLE_ASYNC_NAME} $${EXEC_ASYNC_SRC_FILES})
    target_link_libraries($${EXECUTABLE_ASYNC_NAME}
            $${LIBRARY_NAME}
            $${NRP_ELE_TARGET}
            )
endif()

##########################################
## Append Doxygen files
#add_doxygen_source("$${CMAKE_CURRENT_SOURCE_DIR}" $${EXEC_SRC_FILES} $${LIB_SRC_FILES} $${PYTHON_MODULE_SRC_FILES} $${HEADER_DIRECTORY})


##########################################
## Tests
if($${ENABLE_TESTING} AND NOT "$${TEST_SRC_FILES}" STREQUAL "")
    # Create testing env files
    configure_file("$${CMAKE_CURRENT_SOURCE_DIR}/tests/test_files/test_env.sh.in" "$${CMAKE_CURRENT_BINARY_DIR}/test_env.sh" @ONLY)
    configure_file("$${CMAKE_CURRENT_SOURCE_DIR}/tests/test_env_cmake.h.in" "$${CMAKE_CURRENT_BINARY_DIR}/include/tests/test_env_cmake.h" @ONLY)

    # Create testing executable
    enable_testing()
    add_executable($${TEST_NAME} $${TEST_SRC_FILES})
    target_link_libraries($${TEST_NAME}
        PUBLIC
        $${NAMESPACE_NAME}::$${LIBRARY_NAME}
        GTest::gtest
        GTest::gtest_main)

    gtest_discover_tests($${TEST_NAME}
        WORKING_DIRECTORY "$${PROJECT_SOURCE_DIR}/tests"
        EXTRA_ARGS -VV)
endif()

if(ENABLE_EXAMPLES_TESTING)
    add_test(
            NAME Examples.${engine_name}GrpcEngine
            COMMAND NRPCoreSim -c simulation_config.json -p "$${PROJECT_NAME}.so"
            WORKING_DIRECTORY $${CMAKE_CURRENT_SOURCE_DIR}/example_experiment/)
endif()

##########################################
## Installation

set(INSTALL_CONFIGDIR "$${CMAKE_INSTALL_LIBDIR}/cmake/$${PROJECT_NAME}")

# Install library files
install(TARGETS
        $${LIBRARY_NAME}
    EXPORT
        $${LIB_EXPORT_NAME}
    LIBRARY DESTINATION $${NRP_PLUGIN_INSTALL_DIR}
    ARCHIVE DESTINATION $${NRP_PLUGIN_INSTALL_DIR}
    RUNTIME DESTINATION $${CMAKE_INSTALL_BINDIR}

    PUBLIC_HEADER DESTINATION $${CMAKE_INSTALL_INCLUDEDIR}/$${HEADER_DIRECTORY}
)

# Install export target
install(EXPORT $${LIB_EXPORT_NAME}
    DESTINATION
        $${INSTALL_CONFIGDIR}
    FILE
        "$${LIB_EXPORT_NAME}.cmake"
    NAMESPACE
        "$${NAMESPACE_NAME}::"
)

# Install headers
install(DIRECTORY "$${HEADER_DIRECTORY}" "$${CMAKE_CURRENT_BINARY_DIR}/include/$${HEADER_DIRECTORY}"
    DESTINATION
        $${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING
        PATTERN "*.h"
        PATTERN "*.hpp"
)

# Install Python module
if(TARGET $${PYTHON_MODULE_NAME})
    install(TARGETS $${PYTHON_MODULE_NAME}
        DESTINATION "$${PYTHON_INSTALL_DIR_REL}/$${NRP_PYTHON_MODULE_NAME}/engines/$${PYTHON_MODULE_NAME}")

    install(FILES "$${CMAKE_CURRENT_BINARY_DIR}/src/__init__.py"
        DESTINATION "$${PYTHON_INSTALL_DIR_REL}/$${NRP_PYTHON_MODULE_NAME}/engines/$${PYTHON_MODULE_NAME}")
endif()

# Install executable files
if(TARGET $${EXECUTABLE_NAME})
    install(TARGETS $${EXECUTABLE_NAME}
        RUNTIME DESTINATION $${CMAKE_INSTALL_BINDIR})
endif()

if(TARGET $${EXECUTABLE_ASYNC_NAME})
    install(TARGETS $${EXECUTABLE_ASYNC_NAME}
            RUNTIME DESTINATION $${CMAKE_INSTALL_BINDIR})
endif()

# create cmake version and config files
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "$${CMAKE_CURRENT_BINARY_DIR}/$${LIB_VERSION_NAME}.cmake"
    VERSION $${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

configure_package_config_file("$${CMAKE_CURRENT_LIST_DIR}/cmake/ProjectConfig.cmake.in"
    "$${CMAKE_CURRENT_BINARY_DIR}/$${LIB_CONFIG_NAME}.cmake"
    INSTALL_DESTINATION $${INSTALL_CONFIGDIR}
)

# Install cmake version and config files
install(
    FILES
        "$${CMAKE_CURRENT_BINARY_DIR}/$${LIB_CONFIG_NAME}.cmake"
        "$${CMAKE_CURRENT_BINARY_DIR}/$${LIB_VERSION_NAME}.cmake"
    DESTINATION $${INSTALL_CONFIGDIR}
)
